/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common;

import lombok.Builder;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents a trade event in the matching engine.
 * This class is used to track trades, reductions, and rejections.
 */
public final class MatcherTradeEvent {

    public MatcherEventType eventType; // TRADE, REDUCE, REJECT (rare) or BINARY_EVENT (reports data)

    public int section;

    // false, except when activeOrder is completely filled, removed or rejected
    // it is always true for REJECT event
    // it is true for REDUCE event if reduce was triggered by COMMAND
    public boolean activeOrderCompleted;

    // maker (for TRADE event type only)
    public long matchedOrderId;
    public long matchedOrderUid; // 0 for rejection
    public boolean matchedOrderCompleted; // false, except when matchedOrder is completely filled

    // actual price of the deal (from maker order), 0 for rejection (price can be take from original order)
    public long price;

    // TRADE - trade size
    // REDUCE - effective reduce size of REDUCE command, or not filled size for CANCEL command
    // REJECT - unmatched size of rejected order
    public long size;

    // frozen price from BID order owner (depends on activeOrderAction)
    public long bidderHoldPrice;

    // reference to next event in chain
    public MatcherTradeEvent nextEvent;

    /**
     * Default constructor
     */
    public MatcherTradeEvent() {
    }

    /**
     * All-args constructor
     */
    @Builder
    public MatcherTradeEvent(
            MatcherEventType eventType,
            int section,
            boolean activeOrderCompleted,
            long matchedOrderId,
            long matchedOrderUid,
            boolean matchedOrderCompleted,
            long price,
            long size,
            long bidderHoldPrice,
            MatcherTradeEvent nextEvent) {
        
        this.eventType = eventType;
        this.section = section;
        this.activeOrderCompleted = activeOrderCompleted;
        this.matchedOrderId = matchedOrderId;
        this.matchedOrderUid = matchedOrderUid;
        this.matchedOrderCompleted = matchedOrderCompleted;
        this.price = price;
        this.size = size;
        this.bidderHoldPrice = bidderHoldPrice;
        this.nextEvent = nextEvent;
    }

    /**
     * Creates a copy of this event (for testing only)
     * @return a new MatcherTradeEvent with the same properties
     */
    public MatcherTradeEvent copy() {
        return MatcherTradeEvent.builder()
                .eventType(this.eventType)
                .section(this.section)
                .activeOrderCompleted(this.activeOrderCompleted)
                .matchedOrderId(this.matchedOrderId)
                .matchedOrderUid(this.matchedOrderUid)
                .matchedOrderCompleted(this.matchedOrderCompleted)
                .price(this.price)
                .size(this.size)
                .bidderHoldPrice(this.bidderHoldPrice)
                .build();
    }

    /**
     * Finds the last event in the chain (for testing only)
     * @return the last event in the chain
     */
    public MatcherTradeEvent findTail() {
        MatcherTradeEvent tail = this;
        while (tail.nextEvent != null) {
            tail = tail.nextEvent;
        }
        return tail;
    }

    /**
     * Gets the number of events in the chain
     * @return the chain size
     */
    public int getChainSize() {
        MatcherTradeEvent tail = this;
        int c = 1;
        while (tail.nextEvent != null) {
            tail = tail.nextEvent;
            c++;
        }
        return c;
    }

    /**
     * Creates a chain of events with the specified length
     * @param chainLength the number of events in the chain
     * @return the head of the chain
     */
    @NotNull
    public static MatcherTradeEvent createEventChain(int chainLength) {
        final MatcherTradeEvent head = new MatcherTradeEvent();
        MatcherTradeEvent prev = head;
        for (int j = 1; j < chainLength; j++) {
            MatcherTradeEvent nextEvent = new MatcherTradeEvent();
            prev.nextEvent = nextEvent;
            prev = nextEvent;
        }
        return head;
    }

    /**
     * Converts an event chain to a list (for testing only)
     * @param next the head of the chain
     * @return a list containing all events in the chain
     */
    public static List<MatcherTradeEvent> asList(MatcherTradeEvent next) {
        List<MatcherTradeEvent> list = new ArrayList<>();
        while (next != null) {
            list.add(next);
            next = next.nextEvent;
        }
        return list;
    }

    /**
     * Compare next events chain as well.
     */
    @Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (!(o instanceof MatcherTradeEvent other)) return false;

        return section == other.section
                && activeOrderCompleted == other.activeOrderCompleted
                && matchedOrderId == other.matchedOrderId
                && matchedOrderUid == other.matchedOrderUid
                && matchedOrderCompleted == other.matchedOrderCompleted
                && price == other.price
                && size == other.size
                && bidderHoldPrice == other.bidderHoldPrice
                && ((nextEvent == null && other.nextEvent == null) || (nextEvent != null && nextEvent.equals(other.nextEvent)));
    }

    /**
     * Includes chaining events
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                section,
                activeOrderCompleted,
                matchedOrderId,
                matchedOrderUid,
                matchedOrderCompleted,
                price,
                size,
                bidderHoldPrice,
                nextEvent);
    }

    @Override
    public String toString() {
        return """
               MatcherTradeEvent{
                 eventType=%s,
                 section=%d,
                 activeOrderCompleted=%b,
                 matchedOrderId=%d,
                 matchedOrderUid=%d,
                 matchedOrderCompleted=%b,
                 price=%d,
                 size=%d,
                 bidderHoldPrice=%d,
                 nextEvent=%b
               }""".formatted(
                eventType,
                section,
                activeOrderCompleted,
                matchedOrderId,
                matchedOrderUid,
                matchedOrderCompleted,
                price,
                size,
                bidderHoldPrice,
                nextEvent != null);
    }
}
